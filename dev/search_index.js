var documenterSearchIndex = {"docs":
[{"location":"references/#References","page":"References","title":"References","text":"","category":"section"},{"location":"references/","page":"References","title":"References","text":"[1] Neal, R. (2000). Markov chain sampling methods for Dirichlet process mixture models. Journal of Computational and Graphical Statistics, 9(2). https://doi.org/10.1080/10618600.2000.10474879","category":"page"},{"location":"create/#Create-new-DPM-models","page":"Create new DPM models","title":"Create new DPM models","text":"","category":"section"},{"location":"start/#Getting-Started","page":"Getting Started","title":"Getting Started","text":"","category":"section"},{"location":"start/","page":"Getting Started","title":"Getting Started","text":"Consider a DPM model in its so-called stick-breaking representation:","category":"page"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = DPMNeal3","category":"page"},{"location":"#DPMNeal3","page":"Home","title":"DPMNeal3","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"DPMNeal3 provides an interface  for Dirichlet process mixture (DPM) models in Julia using Neal's algorithm 3  [1].","category":"page"},{"location":"#Getting-Started","page":"Home","title":"Getting Started","text":"","category":"section"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Install with the Julia package manager Pkg, just like any other registered Julia package:","category":"page"},{"location":"","page":"Home","title":"Home","text":"# Press ']' to enter the Pkg REPL mode.\npkg> add DPMNeal3","category":"page"},{"location":"","page":"Home","title":"Home","text":"or","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> using Pkg; \njulia> Pkg.add(\"DPMNeal3\")","category":"page"},{"location":"#Initializing-a-Normal-DPM","page":"Home","title":"Initializing a Normal DPM","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Let us initialize a Normal DPM with N = 1000 observations.","category":"page"},{"location":"","page":"Home","title":"Home","text":"The first step is to set up the environment:","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> using Random, DPMNeal3\njulia> rng = MersenneTwister(1)","category":"page"},{"location":"","page":"Home","title":"Home","text":"Then, we create the generic and specific blocks of this DPM GenericBlock and SpecificBlock, respectively:","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> gb = GenericBlock(rng, 1000)\njulia> sb = SpecificBlock(NormalDPM())","category":"page"},{"location":"","page":"Home","title":"Home","text":"The generic block contains the components that are common to all DPMs (e.g. the cluster labels), while the specific block contains the components that are specific to Normal DPMs (e.g., the NIG kernel hyperparameters).","category":"page"},{"location":"#Performing-one-Gibbs-update","page":"Home","title":"Performing one Gibbs update","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Now, suppose that our sample is contained in the random vector data. Then we can performe one Gibbs update as follows:","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> update_chainstate!(rng, sb, gb, data)","category":"page"},{"location":"","page":"Home","title":"Home","text":"Consider a DPM o in its so-called stick-breaking representation:","category":"page"},{"location":"","page":"Home","title":"Home","text":"beginaligned\n    y_i  bmd bmtheta\n    stackreltexttiny it indsim\n    q(cdot  theta_d_i)\n    \n    d_i  bmw\n    stackreltexttiny it iidsim\n    textCategorical(bmw)\n    \n    forall i\n    in\n    mathcalN equiv 1 ldots N\n    \n    w_j\n    = \n    v_j prodnolimits_z  j (1 - v_z)\n    \n    forall j\n    in\n    mathbbN\n    \n    v_j\n    stackreltexttiny it iidsim\n    textBeta(1 alpha)\n    \n    theta_j\n    stackreltexttiny it iidsim\n    g_0(cdot)\nendaligned","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [DPMNeal3]","category":"page"},{"location":"#DPMNeal3.GenericBlock","page":"Home","title":"DPMNeal3.GenericBlock","text":"GenericBlock(rng::AbstractRNG, N::Int; K0::Int = 1, αa0 = 2.0, αb0 = 4.0)\n\nInitialize the generic block of a DPM with N observations, K0 initial  clusters and a Gamma prior distribution (with shape αa0 and rate αb0)  for the DP concentration parameter.\n\n\n\n\n\n","category":"type"},{"location":"#DPMNeal3.A-Tuple{AbstractDPM}","page":"Home","title":"DPMNeal3.A","text":"A(m::AbstractDPM)\n\nReturn the set of active clusters.\n\n\n\n\n\n","category":"method"},{"location":"#DPMNeal3.K-Tuple{AbstractDPM}","page":"Home","title":"DPMNeal3.K","text":"K(m::AbstractDPM)\n\nReturn the current number of clusters.\n\n\n\n\n\n","category":"method"},{"location":"#DPMNeal3.N-Tuple{AbstractDPM}","page":"Home","title":"DPMNeal3.N","text":"N(m::AbstractDPM)\n\nReturn the global sample size.\n\n\n\n\n\n","category":"method"},{"location":"#DPMNeal3.logpredlik-Tuple{Any, GenericBlock, Any, Any, Any}","page":"Home","title":"DPMNeal3.logpredlik","text":"logpredlik(sb, gb::GenericBlock, data, i, k)\n\nReturn log(y_i  y_-i d_i = k d_-i). \n\n\n\n\n\n","category":"method"},{"location":"#DPMNeal3.n-Tuple{AbstractDPM}","page":"Home","title":"DPMNeal3.n","text":"n(m::AbstractDPM)\n\nReturn the current cluster sizes.\n\n\n\n\n\n","category":"method"},{"location":"#DPMNeal3.α-Tuple{AbstractDPM}","page":"Home","title":"DPMNeal3.α","text":"α(m::AbstractDPM)\n\nReturn the current DP concentration parameter.\n\n\n\n\n\n","category":"method"},{"location":"","page":"Home","title":"Home","text":"<!– push!(LOAD_PATH,\"../src/\") rm -rf build; julia make.jl –>","category":"page"}]
}
